---
- name: Check required variables
  assert:
    that:
      - zennode_zen_dir is defined
      - zennode_zend_svc_name is defined
      - container_net_name is defined
    msg: Required variable missing.

- name: Stop zend service
  service:
    name: "{{ zennode_zend_svc_name }}.service"
    state: stopped
  ignore_errors: yes

- name: zen docker network
  docker_network:
    name: "{{ container_net_name }}"
    ipam_config:
      - subnet: "{{ container_net_subnet }}"
        gateway: "{{ container_net_gateway }}"
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/env python-docker' }}"

- name: zend docker container
  docker_container:
    name: zend
    image: "zencash/zen-node:{{ zennode_zen_ver|d('latest') }}"
    state: present
    restart_policy: unless-stopped
    log_driver: journald
    stop_timeout: 600  # seconds
    tmpfs:
      - /tmp
      - /run
    volumes:
      - "{{ zennode_zen_dir }}:/mnt/zen"
      - zcash-params:/mnt/zcash-params
      - "{{ tls_volume|d(omit, true) }}"
    env:
        LOCAL_USER_ID: "{{ zennode_user_id|d(omit) }}"
        RPC_ALLOWIP_PRESET: LOCALHOST
        RPC_ALLOWIP: "{{ zennode_rpc_ipv4|d(omit) }}"
        EXTERNAL_IP: "{{ [zennode_ipv4, zennode_ipv6]|reject('undefined')|join(',')|d(omit, true) }}"
        TLS_CERT_PATH: "{{ tls_cert }}"
        TLS_KEY_PATH: "{{ tls_key }}"
        OPTS: "-rpcworkqueue=512 -server=1 -listen=1 -txindex=1 -logtimestamps=1"
    networks:
      - name: "{{ container_net_name }}"
        ipv4_address: "{{ zennode_rpc_ipv4|d(omit) }}"
    published_ports:
      - 9033:9033
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/env python-docker' }}"
    tls_dstdir: /mnt/cert
    tls_volume: "{{ [tls_srcdir, tls_dstdir, 'ro']|join(':') if tls_srcdir|d() else none }}"
    tls_cert: "{{ tls_dstdir ~ '/cert.pem' if tls_volume else omit }}"
    tls_key: "{{ tls_dstdir ~ '/privkey.pem' if tls_volume else omit }}"

- name: Create zend service file
  copy:
    dest: "/lib/systemd/system/{{ zennode_zend_svc_name }}.service"
    owner: root
    content: |
      [Unit]
      Description=ZenCash daemon

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/bin/docker start {{ zennode_zend_svc_name }}
      ExecStop=/usr/bin/docker stop {{ zennode_zend_svc_name }}

      [Install]
      WantedBy=multi-user.target
  register: zend_svc_file

- name: Systemd daemon-reload
  systemd:
    daemon_reload: true
  when: zend_svc_file.changed

- name: Start and enable zend service
  service:
    name: "{{ zennode_zend_svc_name }}.service"
    enabled: yes
    state: started
